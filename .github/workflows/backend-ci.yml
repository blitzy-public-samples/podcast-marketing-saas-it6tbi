# Requirements Addressed:
# - Continuous Integration (7.3 Technical Decisions/7.3.1 Architecture Patterns):
#   Automates testing, linting, and building processes for backend services.
# - Automated Testing (7.3 Technical Decisions/7.3.1 Architecture Patterns):
#   Runs automated tests using pytest to validate functionality.
# - Dependency Management (9.2 Frameworks & Libraries):
#   Ensures required dependencies are installed and up-to-date.

name: Backend CI

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches:
      - main
      - development
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service container
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis service container
      redis:
        image: redis:6.2.6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Check out repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Cache Python dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        working-directory: src/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests with pytest
      - name: Run tests
        working-directory: src/backend
        env:
          DJANGO_SETTINGS_MODULE: core.settings.test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          chmod +x scripts/run-tests.sh
          ./scripts/run-tests.sh

      # Upload test results and coverage reports
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            src/backend/htmlcov
            src/backend/.coverage
          retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install linting tools
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      # Run linting checks
      - name: Run linting
        working-directory: src/backend
        run: |
          flake8 .
          black --check .
          isort --check-only .
          mypy .

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Docker image
      - name: Build Docker image
        working-directory: src/backend
        run: |
          docker build -t backend:${{ github.sha }} .
          docker tag backend:${{ github.sha }} backend:latest

      # Save Docker image as artifact
      - name: Save Docker image
        run: |
          docker save backend:${{ github.sha }} | gzip > backend-image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: backend-image.tar.gz
          retention-days: 1