# Human Tasks:
# 1. Configure AWS credentials in GitHub repository secrets
# 2. Set up Docker Hub credentials in GitHub repository secrets
# 3. Verify Terraform state backend configuration
# 4. Review resource sizing in Terraform configurations
# 5. Ensure proper IAM roles and permissions are configured in AWS

# Requirement addressed: 9.5.2 CI/CD Pipeline
# Implements automated deployment workflow for the staging environment

name: Deploy to Staging

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: podcast-marketing-platform
  DEPLOY_ENV: staging

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        # actions/checkout@v3
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        # aws-actions/configure-aws-credentials@v2
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        # docker/login-action@v2
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        # docker/build-push-action@v4
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}:staging
            ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.ECR_REPOSITORY }}:staging
          cache-to: type=inline
          build-args: |
            ENVIRONMENT=staging

  deploy:
    name: Deploy to Staging Environment
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/staging
        run: terraform init

      - name: Terraform Workspace
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform workspace select staging || terraform workspace new staging

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/staging
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_environment: staging
          TF_VAR_image_tag: ${{ github.sha }}

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: terraform apply -auto-approve tfplan

      - name: Update ECS Service
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: |
          aws ecs update-service \
            --cluster ${{ env.DEPLOY_ENV }}-cluster \
            --service podcast-marketing-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for ECS Service Stability
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.DEPLOY_ENV }}-cluster \
            --services podcast-marketing-service \
            --region ${{ env.AWS_REGION }}

      - name: Verify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: |
          echo "Checking ECS service status..."
          aws ecs describe-services \
            --cluster ${{ env.DEPLOY_ENV }}-cluster \
            --services podcast-marketing-service \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount}'