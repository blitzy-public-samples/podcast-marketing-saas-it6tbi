# Human Tasks:
# 1. Build and push the frontend Docker image to the container registry
# 2. Verify ConfigMap and Secret resources exist and contain required values
# 3. Adjust resource limits based on actual application requirements
# 4. Configure health check endpoints in the frontend application
# 5. Review and adjust probe timings based on application startup time

# Requirement Addressed:
# - Frontend Deployment (7.5 Deployment Architecture/7.5.1 Infrastructure Requirements)
#   Ensures the frontend application is deployed as a scalable and resilient Kubernetes deployment
# - Containerized Frontend Application (7.3 Technical Decisions/7.3.1 Architecture Patterns)
#   Supports the deployment of the containerized React-based frontend application in a Kubernetes cluster

# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: default
  labels:
    app: frontend
  annotations:
    kubernetes.io/description: "React-based frontend application deployment"
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: "frontend"
spec:
  # Configure horizontal scaling with 3 replicas for high availability
  replicas: 3
  # Define update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Pod selector matching
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      # Security context for the pod
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsNonRoot: true
      containers:
        - name: frontend
          image: frontend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: application-config
            - secretRef:
                name: application-secrets
          # Resource limits and requests
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
          # Liveness probe configuration
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
          # Readiness probe configuration
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 3
      # Pod scheduling and anti-affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - frontend
                topologyKey: kubernetes.io/hostname
      # Termination grace period
      terminationGracePeriodSeconds: 30

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
  labels:
    app: frontend
  annotations:
    kubernetes.io/description: "Frontend application service"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: frontend