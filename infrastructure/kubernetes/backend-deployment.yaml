# Human Tasks:
# 1. Create and configure the 'database-secrets' Kubernetes secret with DATABASE_URL
# 2. Create and configure the 'application-secrets' Kubernetes secret with SECRET_KEY
# 3. Build and push the backend Docker image to the container registry
# 4. Configure resource quotas and limits according to cluster capacity
# 5. Review and adjust probe settings based on application startup time
# 6. Ensure Redis service (redis-service) is deployed and accessible

# Requirement Addressed:
# - Backend Deployment in Kubernetes (7.5 Deployment Architecture/7.5.1 Infrastructure Requirements)
#   This deployment configuration ensures scalable and resilient operation of the Django backend
#   with proper resource allocation, health monitoring, and integration with other services.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: default
  labels:
    app: backend
spec:
  # Configure horizontal scaling with 3 replicas for high availability
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: backend:latest
          ports:
            - containerPort: 8000
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: core.settings.production
            - name: CELERY_BROKER_URL
              value: redis://redis-service:6379/0
            - name: CELERY_RESULT_BACKEND
              value: redis://redis-service:6379/1
            # Secure sensitive information using Kubernetes secrets
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: DATABASE_URL
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: SECRET_KEY
          # Resource limits and requests for proper scheduling and resource management
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
          # Health monitoring configuration
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5